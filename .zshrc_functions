# globus
if type globus > /dev/null 2>&1; then
    eval "$(globus --zsh-completer)"
fi

# ranger
rangercd() {
	tmp="$(mktemp)"
	ranger --choosedir="$tmp" "$@"
	if [ -f "$tmp" ]; then
	dir="$(cat "$tmp")"
	rm -f "$tmp"
	[ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
	fi
}
if [ -n "$RANGER_LEVEL" ]; then export PS1="[ranger]$PS1"; fi

# fzf
function f() {
    file=$(fzf) && $EDITOR "$file"
}

# quickloof file w/ bat
function bf() {
    bat "$(fzf)"
}

# ripgrepall + fzf
function rgf() {
    RG_PREFIX="rg --column --line-number --no-heading --color=always --smart-case"
    QUERY="${*:-}"
    : | fzf --ansi --disabled --query "$QUERY" \
        --bind "start:reload:$RG_PREFIX {q}" \
        --bind "change:reload:sleep 0.1; $RG_PREFIX {q} || true" \
        --delimiter : \
        --preview 'bat --color=always --style=header {1} --highlight-line {2}' \
        --height="100%" \
        --layout="reverse" \
        --pointer="->" \
        --bind 'enter:become(nvim {1} +{2})'
}
test -e /Users/griffen/.iterm2_shell_integration.zsh && source /Users/griffen/.iterm2_shell_integration.zsh || true

# activate conda environment
function a() {
    local choice=$(
        mamba env list |
        sed 's/\*/ /;1,2d' |
        gxargs -I {} bash -c 'name_path=( {} );py_version=( $(${name_path[1]}/bin/python --version) );echo ${name_path[0]} ${py_version[1]} ${name_path[1]}' |
        column -t |
        fzf --layout=reverse \
        --info=inline \
        --border=rounded \
        --height=40 \
        --preview-window="right:30%" \
        --preview-label=" conda tree leaves " \
        --preview=$'conda tree -p {3} leaves | perl -F\'[^\\w-_]\' -lae \'print for grep /./, @F;\' | sort'
    )
    [[ -n "$choice" ]] && mamba activate $(echo "$choice" | gawk '{print $3}')
}

# fzf edit
function fe() {
    IFS=$'\n'
    files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))
    [[ -n "$files" ]] && ${EDITOR:-nvim} "${files[@]}"
}

# fzf cd
function ff() {
    local dir
    while true; do
        dir="$(/bin/ls -1ap | grep '/$' | grep -v '^./$' | fzf --height 90% --reverse --no-multi --preview 'pwd' --preview-window=up,1,border-none --no-info)"
        if [[ -z "${dir}" ]]; then
            break
        else
            cd "${dir}" || exit
        fi
    done
}

# fzf cd 2
function sd() {
    cd $(find * -type d | fzf)
}

# search globally including hidden
function fda() {
    cd "$HOME" || exit
    dir="$(fd -a -H -t d "${1:-.}" | fzf +m)"
    cd "$dir" || exit
}

# open with skim
function fpdf() {
    open -a /Applications/Skim.app "$(fd -u -e pdf | fzf --query "$1")"
}

# open file
function fo() {
    open "$(fd -I -a -t f -H "${1:-.}" | fzf +m --exact)"
}

# open application
function ap() {
    open -a "$(find /Applications /System/Applications/ /System/Applications/Utilities -name '*app' -maxdepth 1 -exec basename {} .app \; | fzf --query "$1")"
}

# fkill - kill process
function fkill() {
    local pid

    if [ "$UID" != "0" ]; then
        pid=$(ps -f -u $UID | sed 1d | fzf -m --preview="" | awk '{print $2}')
    else
        pid=$(ps -ef | sed 1d | fzf -m --preview="" | awk '{print $2}')
    fi

    if [ "x$pid" != "x" ]
    then
        echo $pid | gxargs kill -${1:-9}
    fi
}

# bip - Brew Install Package
function bip() {
    local inst=$(brew search "$@" | fzf -m)
    if [[ $inst ]]; then
        for prog in $(echo $inst);
        do; brew install $prog; done
    fi
}

# bup - Brew Update Package
function bup() {
    local upd=$(brew leaves | fzf -m)
    if [[ $upd ]]; then
        for prog in $(echo $upd);
        do; brew upgrade $prog; done
    fi
}

# bcp - Brew Clean (delete) Package
function bcp() {
    local uninst=$(brew leaves | fzf -m)
    if [[ $uninst ]]; then
        for prog in $(echo $uninst);
        do; brew uninstall $prog; done
    fi
}

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

##########################################################

# sensible date and time display format
function ti() {
    [ "$#" -eq 0 ] && set -- +'%a, %b %d, %Y %r'
    command date "$@"
}

function manp() {
    man -t "${1}" | open -f -a Skim
}

function ipy() {
    if [[ -f $CONDA_PREFIX/bin/ipython ]]; then
        ipython
    else
        if [[ -z $CONDA_DEFAULT_ENV ]]; then
            printf "conda not activated\n"
        else
            printf "ipython not installed in conda environment '$CONDA_DEFAULT_ENV'\n"
        fi
    fi
}

function gpath() {
    greadlink -f "${1}" | pbcopy
}

function cnv() {
    select config in nvim nvim-minimal
    do NVIM_APPNAME=$config nvim $@; break; done
}
